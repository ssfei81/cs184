# Spheres!

size 1000 1000 

# Now specify the camera.  This is what you should implement.
# This file has 4 camera positions.  Render your scene for all 4.

camera 0 0 4 0 0 0 0 1 0 45
#camera 0 0 4 0 0 0 0 1 0 30
#camera 0 -3 3 0 0 0 0 1 0 30
#camera -4 0 1 0 0 1 0 0 1 45
#camera -4 -4 4 1 0 0 0 1 0 30

reflection 0.7 0.7 0.7

# lighting/material definitions
# for initial testing, you should get the geometry right
# you may want to use dummy (constant) shading, ignoring these lines

ambient .1 .1 .1
directional 0.57735027 -0.57735027 -0.57735027 1 1 1
point 4 4 8 .5 .5 .5
point -4 5 4 .5 .5 .5

diffuse 1 0 0 
specular 0.2 0.2 0.2

# Now specify the geometry 
# Again, for initial testing, maybe you want to implement a dummy 
# ray-plane intersection routine, instead of reading this fully.
# Though it's probably simpler you just implement this, for later 
# parts of the assignment.


pushTransform
maxverts 4 
#rotate 1 0 0 45
#translate 0 0 -10
vertex -1 -1 0
vertex +1 -1 0
vertex +1 +1 0
vertex -1 +1 0

#tri 0 1 2
#tri 0 2 3

popTransform

pushTransform
scale 4 2 2
#translate 2 2 0
ambient 0.1 0.1 0.1
diffuse 1.0 0.1 0.1
specular 1.0 1.0 1.0
shininess 50
sphere 0 0 -30 2
popTransform

pushTransform
scale 0.5 1.5 1.0
#rotate 0 1 0 45
rotate 1 0 0 20
#translate 5 2 0
ambient 0.1 0.1 0.1
diffuse 0 1 0
specular 1 1 1
shininess 50
#sphere 2 0 -17 1.5
popTransform

ambient 0.1 0.1 0.1
diffuse 0 0 1
specular 1 1 1
shininess 50
sphere 0 -4 -17 1.5

ambient 0.1 0.1 0.1
diffuse 1 1 0
specular 1 1 1
shininess 50
sphere 4 0 -17 1.5

ambient 0.1 0.1 0.1
diffuse 0 1 1
specular 1 1 1
shininess 50
sphere -4 0 -17 1.5

ambient 0.1 0.1 0.1
diffuse 0.5 0.5 1
specular 1 1 1
shininess 50
sphere 0 4 -17 1.5


